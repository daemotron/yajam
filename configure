#!/bin/sh
#
# Copyright (c) 2015 daemotron
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

detect_binary() {
    local BINDIRS="/bin /usr/bin /sbin /usr/sbin /usr/local/bin /usr/local/sbin"
    local rval=""
    for i in ${BINDIRS}; do
        if [ -x "${i}/${1}" ]; then
            rval="${i}/${1}"
            break
        fi
    done
    echo $rval
}

# Detect some binaries needed
b_basename=$(detect_binary "basename")
b_grep=$(detect_binary "grep")
b_id=$(detect_binary "id")
b_install=$(detect_binary "install")
b_realpath=$(detect_binary "realpath")
b_rm=$(detect_binary "rm")
b_sed=$(detect_binary "sed")
b_uname=$(detect_binary "uname")
b_wc=$(detect_binary "wc")

# Default settings
PREFIX=/usr/local
OWNER=root
GROUP=$($b_id -gn ${OWNER})

# Internal settings
CONFDIR=$(/bin/realpath $0)
CONFDIR=${CONFDIR%\/*}
TEMPLATE="${CONFDIR}/Makefile.in"
MAKEFILE="${CONFDIR}/Makefile"
SIM=0
GROUPFILE=/etc/group
IGNORE_OS="no"
OS="$(${b_uname} -s)"
MAJOR=$(${b_uname} -r | $b_sed 's/\..*//g')

# Colors
if ! [ -t 1 ] || ! [ -t 2 ]; then
    USE_COLORS="no"
else
    USE_COLORS="yes"
    cyan="\033[36m"
    magenta="\033[35m"
    red="\033[1;31m"
    amber="\033[1;33m"
    green="\033[1;32m"
    white="\033[1;37m"
    normal="\033[0m"
fi

usage() {
    umsg="${white}usage: ${red}$($b_basename ${0}) ${white}[${red}-c${white}]"
    umsg="${umsg} ${white}[${red}-N${white}] [${red}-s${white}]"
    umsg="${umsg} [${green}options${white}]"
    echo -e "${umsg}

${red}Runtime Flags:
${red}    -c, --clean         ${normal}-- Clean up files generated by previous runs
${red}    -N, --no-color      ${normal}-- Disable colors
${red}    -s, --simulate      ${normal}-- Simulation mode, printing configuration result

${red}Configuration Options:
${red}    -g, --group ${green}group   ${normal}-- set group ownership, defaults to ${GROUP}
${red}    -p, --prefix ${green}prefix ${normal}-- set prefix for installation, defaults to ${PREFIX}
${red}    -o, --owner ${green}user    ${normal}-- set ownership, defaults to ${OWNER}
${normal}"
}

while [ "$#" -gt "0" ]; do
    case ${1} in
        -N|--no-color)
            USE_COLORS="no"
            cyan=""
            magenta=""
            red=""
            amber=""
            green=""
            white=""
            normal=""
            shift
            ;;
        -c|--clean)
            $b_rm -f ${MAKEFILE}
            exit 0
            shift
            ;;
        -g|--group)
            if [ "$#" -gt "1" ]; then
                check=$($b_grep "^${2}:" ${GROUPFILE} | $b_wc -l)
                if [ "${check}" -ne "1" ]; then
                    printf "${red}>>> Error: ${normal}argument ${cyan}'${2}'"
                    printf "${normal} is not a valid group${normal}\n"
                    exit 1
                else
                    GROUP=${2}
                fi
            else
                printf "${red}>>> Error: ${normal}expected argument ${green}"
                printf "group ${normal}for option ${red}-g${normal}\n"
                exit 1
            fi
            shift 2
            ;;
        -o|--owner)
            if [ "$#" -gt "1" ]; then
                { check=$($b_id -un ${2} | $b_wc -l); }> /dev/null 2>&1
                if [ "${check}" -ne "1" ]; then
                    printf "${red}>>> Error: ${normal}argument ${cyan}'${2}'"
                    printf "${normal} is not a valid user${normal}\n"
                    exit 1
                else
                    OWNER=${2}
                fi
            else
                printf "${red}>>> Error: ${normal}expected argument ${green}"
                printf "user ${normal}for option ${red}-o${normal}\n"
                exit 1
            fi
            shift 2
            ;;
        -p|--prefix)
            if [ "$#" -gt "1" ]; then
                if [ -d ${2} ]; then
                    PREFIX=$(echo ${2} | $b_sed 's/\/$//g')
                else
                    printf "${red}>>> Error: ${normal}argument ${cyan}'${2}'"
                    printf "${normal}is not a directory${normal}\n"
                    exit 1
                fi
            else
                printf "${red}>>> Error: ${normal}expected argument ${green}"
                printf "prefix ${normal}for option ${red}-p${normal}\n"
                exit 1
            fi
            shift 2
            ;;
        -s|--sim|--simulate)
            SIM=1
            shift
            ;;
        -t|--test)
            IGNORE_OS="yes"
            shift
            ;;
        -h|--help|help)
            usage
            exit 0
            ;;
        *)
            usage
            exit 1
            break
            ;;
    esac
done

if [ "${OS}" != "FreeBSD" ]; then
    if [ "${IGNORE_OS}" != "yes" ]; then
        printf "${red}>>> Error: ${normal}the ${cyan}${OS} ${normal}operating"
        printf " system is not supported by yajam\n"
        exit 1
    else
        printf "${amber}>>> Warning: ${normal}the ${cyan}${OS} ${normal}"
        printf "operating system is not supported by yajam\n"
    fi
else
    if [ "${MAJOR}" -lt "10" ]; then
        printf "${amber}>>> Warning: ${normal}yajam has not been tested with"
        printf " FreeBSD versions < 10.0\n"
    fi
fi

if [ "${SIM}" -ge "1" ]; then
    printf "${amber}Configuration results ${normal}${magenta}(simulation "
    printf "only)${normal}:\n"
    printf "${green}>>> ${white}Install binary:        ${cyan}${b_install}\n"
    printf "${green}>>> ${white}Installation prefix:   ${cyan}${PREFIX}\n"
    printf "${green}>>> ${white}Installation owner:    ${cyan}${OWNER}\n"
    printf "${green}>>> ${white}Installation group:    ${cyan}${GROUP}\n"
else
    $b_sed "s@%{INSTALL_BINARY}@${b_install}@g" $TEMPLATE | \
        $b_sed "s@%{DELETE_BINARY}@${b_rm}@g" | \
        $b_sed "s@%{PREFIX}@${PREFIX}@g" | \
        $b_sed "s@%{OWNER}@${OWNER}@g" | \
        $b_sed "s@%{GROUP}@${GROUP}@g" \
        > ${MAKEFILE}
fi
